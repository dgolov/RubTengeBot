import aiohttp
import datetime
import json
import os
import re

from random import choice
from config import db_engine, logger


async def get_exchange_rate():
    """ –ó–∞–ø—Ä–æ—Å –≤ API –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ —Ç–µ–Ω–≥–µ –∫ —Ä—É–±–ª—é """
    url = os.environ.get('EXCHANGE_RATE_URL')
    async with aiohttp.ClientSession(trust_env=True) as session:
        async with session.get(url, ssl=False) as response:
            logger.info(f"[get_exchange_rate] GET {url} - status code: {response.status}")
            exchange_rate = await response.text(encoding='utf-8')
            result_kz = json.loads(exchange_rate)['Valute']['KZT']
    return result_kz['Nominal'] / result_kz['Value']


async def get_rub_expand(message: str, save: bool = True) -> tuple:
    """ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–Ω–≥–µ –≤ —Ä—É–±–ª–∏
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param save: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥. –ï—Å–ª–∏ False, —Ç–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö, –≤ —Ç–µ–Ω–≥–µ –∏ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    """
    try:
        exchange_rate = await get_exchange_rate()
        tng = get_sum_from_message(message)
        rub = round(tng / exchange_rate, 2)
    except ValueError as e:
        logger.error(f'[get_rub_expand] Error: {e}')
        return None, None, None

    rub_txt = '—Ä—É–±–ª–µ–π'
    if str(int(rub)).endswith('1'):
        rub_txt = '—Ä—É–±–ª—å'
    elif str(int(rub))[-1] in ('2', '3', '4'):
        rub_txt = '—Ä—É–±–ª—è'

    result_message = f'üíµ –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª {rub} {rub_txt} üíµ' if save else f'üíµ –≠—Ç–æ –±—É–¥–µ—Ç {rub} {rub_txt} üíµ'
    return rub, tng, result_message


def get_sum_from_message(message: str) -> float:
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è """
    is_break = False
    result_sum = ''
    for char in message:
        if char.isdigit() or char in (',', '.'):
            is_break = True
            result_sum += char
            continue
        elif char.isalpha() and is_break:
            break

    return float(result_sum)


def get_greeting():
    """ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫—Ç–æ —Ç–æ –∑–∞—Ö–æ—á–µ—Ç –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º) """
    time = datetime.datetime.utcnow().hour + 6

    default_greetings = ['–ü—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π']

    if 0 < time < 6:
        default_greetings.extend(['–î–æ–±—Ä–æ–π –Ω–æ—á–∏'])
    elif 6 < time < 10:
        default_greetings.extend(['–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ'])
    elif time < 18:
        default_greetings.extend(["–î–æ–±—Ä—ã–π –¥–µ–Ω—å"])
    else:
        default_greetings.extend(["–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"])
    return choice(default_greetings)


async def mach_answer(message):
    """ –ü–æ–∏—Å–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ """
    text = message.text.lower()
    name = message.from_user.first_name

    rub, tng, result = await get_rub_expand(message=text, save=False)
    if result:
        return result

    if re.match(r'(^|\s)(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π(|—Ç–µ)|–¥–æ–±—Ä(–æ–µ|—ã–π) (–¥–µ–Ω—å|–≤–µ—á–µ—Ä|—É—Å—Ç—Ä–æ)|—Ö–∞–π|—Ö—ç–ª–ª–æ—É)', text) or \
            any(smile in text for smile in ('üëã', 'üôã', 'ü§ö', '‚úã', 'ü§ù', '‚úåÔ∏è')):
        greeting = get_greeting()
        if name:
            greeting += f', {name}'
        return greeting

    elif re.match(r'–∫–∞–∫ (–¥–µ–ª|–∂–∏–∑–Ω—å|–ø–æ–∂–∏–≤–∞–µ—à—å|—Å–∞–º|–∂–∏–≤–µ—à—å|—Ç—ã)', text):
        answer = choice(db_engine.get_answer_list(type_answer='how_are_you'))
    else:
        answer = choice(db_engine.get_answer_list(type_answer='default'))

    return answer.text


def get_statistic_message(result):
    """ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ """
    message = f"\n{result.get('total')['tng_sum']} —Ç–µ–Ω–≥–µ\n{result.get('total')['rub_sum']} —Ä—É–±–ª–µ–π\n"
    message += "\nüí∞ üí∞ üí∞ üí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
    if result['categories']:
        for category, sum_dict in result['categories'].items():
            message += f"\n{category}: {sum_dict['tng_sum']} —Ç–µ–Ω–≥–µ = {sum_dict['rub_sum']} —Ä—É–±"
    return message
