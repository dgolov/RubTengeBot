from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from config import dp, db_engine, logger
from helpers import get_rub_expand, get_statistic_message
from keyboards import client_keyboard, expand_keyboard, inline_categories_keyboard, statistic_keyboard

from datetime import datetime, timedelta

from handlers.states import FSMExpend, FSMStatistic


def check_reset(func):
    """ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è """
    async def wrapper(message: types.Message, state: FSMContext):
        if any(command in message.text for command in ('–í–≤–æ–¥_—Ä–∞—Å—Ö–æ–¥–æ–≤', 'start', 'help')):
            await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=client_keyboard)
            logger.info(f'[client - check_reset] {message.from_user.id} - bot - message: –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
            return await reset_state(message, state)
        else:
            return await func(message, state)
    return wrapper


async def reset_state(message: types.Message, state: FSMContext):
    """ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤–æ–æ–¥–µ –∫–æ–º–∞–Ω–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã """
    if any(command in message.text for command in ('–í–≤–æ–¥_—Ä–∞—Å—Ö–æ–¥–æ–≤', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')):
        logger.debug(
            f'[client - reset_state] {message.from_user.id} - {message.from_user.username} - reset set_expend'
        )
        await state.finish()
        return await set_expense(message, state)
    else:
        logger.debug(
            f'[client - reset_state] {message.from_user.id} - {message.from_user.username} - reset send_welcome'
        )
        await state.finish()
        return await send_welcome(message)


# --- HANDLERS ---


async def send_welcome(message: types.Message):
    """ Welcome and help message """
    user = db_engine.get_user_by_telegram_id(message.from_user.id)
    if not user:
        db_engine.create_new_user(message)

    logger.info(
        f'[client - send_welcome] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –±–æ—Ç —É—á–µ—Ç–∞ —Ä–∞—Å—Å—Ö–æ–¥–æ–≤ –≤ —Ä–µ—Å–ø—É–±–ª–∏–∫–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. –í–≤–µ–¥–∏ —Å—Å—É–º–º—É –≤ —Ç–µ–Ω–≥–µ –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–µ –≤ —Ä—É–±–ª–∏. "
        "\n–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∞–ª—é—Ç—É –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É, —Å–æ—Ä—è–Ω, —è –Ω–µ –∑–Ω–∞—é –ø–æ—á–µ–º —Ç—ã –º–µ–Ω—è–µ—à—å –Ω–∞–ª–∏–∫..."
        "\n–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. üëáüëáüëá"
        "\nüá∞üáø –ê–ª“ì–∞ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω! üá∞üáø",
        reply_markup=client_keyboard
    )


async def set_expense(message: types.Message, state: FSMContext):
    """ Convert rub to tng. State set sum """
    logger.info(
        f'[client - set_expense] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )
    async with state.proxy() as data:
        data[message.from_user.id] = {}
    await FSMExpend.sum.set()
    await message.answer('–í–≤–µ–¥–∏ —Å—É–º–º—É –≤ —Ç–µ–Ω–≥–µ', reply_markup=expand_keyboard)


async def cancel_handler(message: types.Message, state: FSMContext):
    """ Cancel current state """
    logger.debug(f'[client - cancel_handler] {message.from_user.id} - {message.from_user.username} - cancel handler')
    current_state = await state.get_state()
    logger.debug(
        f'[cancel_state] {message.from_user.id} - {message.from_user.username} - current_state - {current_state}'
    )
    if current_state is None:
        return
    async with state.proxy() as data:
        data[message.from_user.id] = {}
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=client_keyboard)


@check_reset
async def convert_expense(message: types.Message, state: FSMContext):
    """ Convert rub to tng. State convert """
    logger.info(
        f'[client - convert_expense] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )
    move_on = True
    rub, tng, answer = await get_rub_expand(message.text)
    if not answer:
        logger.warning(
            f'[client - convert_expense] {message.from_user.id} - {message.from_user.username} - convert exception'
        )
        move_on = False
        answer = '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ—Ö–æ–∂–µ —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª —Å—É–º–º—É.'
        logger.info(f'[client - convert_expense] {message.from_user.id} - bot - message: {answer}')
    await message.answer(answer)
    if move_on:
        async with state.proxy() as data:
            data[message.from_user.id]['sum_rub'] = rub
            data[message.from_user.id]['sum_tng'] = tng
        await FSMExpend.next()
        await message.answer("–ù–∞ —á—Ç–æ —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª —ç—Ç–∏ –¥–µ–Ω—å–≥–∏?", reply_markup=inline_categories_keyboard)


@check_reset
async def how_handler_sum(message: types.Message, state: FSMContext):
    logger.info(
        f'[client - how_handler_sum] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )

    async with state.proxy() as data:
        if not data[message.from_user.id].get('sum_rub', None):
            data[message.from_user.id]['sum_rub'] = 1
        else:
            data[message.from_user.id]['sum_rub'] += 1
        logger.info(
            f"[client - how_handler_sum] {message.from_user.id} - {message.from_user.username} - "
            f"retry {data[message.from_user.id]['sum_rub']}")

        if data[message.from_user.id]['sum_rub'] == 3:
            await state.finish()
            keyboard = client_keyboard
        else:
            keyboard = expand_keyboard

    message_dict = {
        1: '–†—É—á–∫–∞–º–∏... –ù–∞–∂–∏–º–∞–π –Ω–∞ —Ü–∏—Ñ–µ—Ä–∫–∏ –∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É. –≠—Ç–æ –Ω–µ —Å–ª–æ–∂–Ω–æ.',
        2: '–ü—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ —Ü–∏—Ñ—Ä—ã –∏ –≤—Å–µ...',
        3: '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑',
    }
    answer = message_dict.get(data[message.from_user.id]['sum_rub'])
    await message.answer(answer, reply_markup=keyboard)
    logger.info(f'[client - how_handler_sum] {message.from_user.id} - bot - message: {answer}')


@check_reset
async def set_category(message: types.Message, state: FSMContext):
    """ Convert rub to tng. State set category """
    logger.info(
        f'[client - set_category] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )
    async with state.proxy() as data:
        data[message.from_user.id]['category'] = message.text
    await state.finish()
    try:
        await set_cost(message.from_user.id, data[message.from_user.id])
        answer = f"‚úÖ {data[message.from_user.id]['sum_rub']} —Ä—É–± –≤–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–∑—É —Ç–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚úÖ"
        await message.answer(answer, reply_markup=client_keyboard)
        logger.info(f'[client - set_category] {message.from_user.id} - bot - message: {answer}')
    except Exception as e:
        logger.error(f'[client - set_category_call] {message.from_user.id} - {message.from_user.username} - Error: {e}')
        await message.answer('–û—à–∏–±–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö... –°–æ—Ä—è–Ω(', reply_markup=client_keyboard)


@dp.callback_query_handler(Text(startswith='category'), state=FSMExpend.category)
async def set_category_call(callback: types.CallbackQuery, state: FSMContext):
    """ Convert rub to tng. State set category callback """
    logger.info(
        f'[client - set_category_call] {callback.from_user.id} - {callback.from_user.username} - '
        f'message: {callback.data}'
    )
    async with state.proxy() as data:
        data[callback.from_user.id]['category'] = callback.data
    await state.finish()
    try:
        await set_cost(callback.from_user.id, data[callback.from_user.id])
        answer = f"‚úÖ {data[callback.from_user.id]['sum_rub']} —Ä—É–± –≤–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–∑—É —Ç–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚úÖ"
        await callback.message.answer(answer, reply_markup=client_keyboard)
        logger.info(f'[client - set_category_call] {callback.from_user.id} - bot - message: {answer}')
    except Exception as e:
        logger.info(
            f'[client - set_category_call] {callback.from_user.id} - {callback.from_user.username} - Error: {e}'
        )
        await callback.message.answer('–û—à–∏–±–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö... –°–æ—Ä—è–Ω(', reply_markup=client_keyboard)


async def set_cost(user_id, data):
    """ Save storage to database """
    try:
        db_engine.set_cost(user_id, data)
        logger.info(f'[client - set_cost] {user_id} - data saved successfully')
    except Exception as e:
        logger.info(f'[client - set_cost] {user_id} - data saved failed. Error: {e}')


async def get_statistic(message: types.Message):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ """
    logger.info(
        f'[client - get_statistic] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )
    await FSMStatistic.start.set()
    await message.answer(f"–£–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥", reply_markup=statistic_keyboard)


async def set_all_statistic_period(message: types.Message, state=FSMStatistic.start):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ """
    logger.info(
        f'[client - set_all_statistic_period] {message.from_user.id} - {message.from_user.username} - '
        f'message: {message.text}'
    )
    result = db_engine.get_statistics(telegram_user_id=message.from_user.id)
    logger.debug(f'[client - set_all_statistic_period] {message.from_user.id} - statistic: {result}')
    await state.finish()
    answer = f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {get_statistic_message(result)}"
    await message.answer(answer, reply_markup=client_keyboard)
    logger.info(f'[client - set_all_statistic_period] {message.from_user.id} - bot - message: {answer}')


async def set_month_statistic_period(message: types.Message, state=FSMStatistic.start):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü """
    logger.info(
        f'[client - set_month_statistic_period] {message.from_user.id} - {message.from_user.username} - '
        f'message: {message.text}'
    )
    today = datetime.utcnow() + timedelta(hours=6)
    start = datetime.utcnow() + timedelta(hours=6) - timedelta(days=today.day - 1)
    period = {
        'start': start.date(),
        'end': today,
        'message': '–ó–∞ —Ç–µ–∫—É—à–∏–π –º–µ—Å—è—Ü'
    }
    await get_statistics(message, period, state)


async def set_week_statistic_period(message: types.Message, state=FSMStatistic.start):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é """
    logger.info(
        f'[set_week_statistic_period] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )
    today = datetime.utcnow() + timedelta(hours=6)
    start = datetime.utcnow() + timedelta(hours=6) - timedelta(days=today.weekday())
    period = {
        'start': start.date(),
        'end': today,
        'message': '–ó–∞ —Ç–µ–∫—É—à—É—é –Ω–µ–¥–µ–ª—é'
    }
    await get_statistics(message, period, state)


async def set_today_statistic_period(message: types.Message, state=FSMStatistic.start):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è """
    logger.info(
        f'[set_today_statistic_period] {message.from_user.id} - {message.from_user.username} - message: {message.text}'
    )
    today = datetime.utcnow() + timedelta(hours=6)
    period = {
        'start': today.date(),
        'end': today,
        'message': '–ó–∞ —Ç–µ–∫—É—à–∏–π –¥–µ–Ω—å'
    }
    await get_statistics(message, period, state)


async def set_yesterday_statistic_period(message: types.Message, state=FSMStatistic.start):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞ """
    logger.info(
        f'[set_yesterday_statistic_period] {message.from_user.id} - {message.from_user.username} - '
        f'message: {message.text}'
    )
    today = datetime.utcnow() + timedelta(hours=6)
    start = today - timedelta(days=1)
    period = {
        'start': start.date(),
        'end': today,
        'message': '–ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–ô –¥–µ–Ω—å'
    }
    await get_statistics(message, period, state)


async def get_statistics(message, period, state):
    """ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ """
    logger.debug(f'[client - get_statistics] {message.from_user.id} - period: {period}')
    try:
        result = db_engine.get_statistics(telegram_user_id=message.from_user.id, period=period)
    except Exception as e:
        logger.error(f'[client - get_statistics] {message.from_user.id} - error: {e}')
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=client_keyboard)
    else:
        logger.debug(f'[client - get_statistics] {message.from_user.id} - statistic: {result}')
        answer = f"{period.get('message')} {get_statistic_message(result)}"
        await message.answer(answer, reply_markup=client_keyboard)
    finally:
        await state.finish()


####################################################


def register_handlers_client(dispatcher: Dispatcher):
    dispatcher.register_message_handler(send_welcome, commands=['start', 'help'])
    dispatcher.register_message_handler(set_expense, commands=['–í–≤–æ–¥_—Ä–∞—Å—Ö–æ–¥–æ–≤'], state=None)
    dispatcher.register_message_handler(cancel_handler, commands=['cancel', '–æ—Ç–º–µ–Ω–∞'], state='*')
    dispatcher.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dispatcher.register_message_handler(set_expense, Text(equals='–≤–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥', ignore_case=True), state=None)
    dispatcher.register_message_handler(how_handler_sum, Text(equals='–∫–∞–∫', ignore_case=True), state=FSMExpend.sum)
    dispatcher.register_message_handler(convert_expense, state=FSMExpend.sum)
    dispatcher.register_message_handler(set_category, state=FSMExpend.category)
    dispatcher.register_message_handler(get_statistic, commands=['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], state=None)
    dispatcher.register_message_handler(set_all_statistic_period, commands=['–ó–∞_–≤—Å–µ_–≤—Ä–µ–º—è'], state=FSMStatistic.start)
    dispatcher.register_message_handler(
        set_all_statistic_period, Text(contains='–≤—Å–µ', ignore_case=True), state=FSMStatistic.start
    )
    dispatcher.register_message_handler(set_month_statistic_period, commands=['–ó–∞_–º–µ—Å—è—Ü'], state=FSMStatistic.start)
    dispatcher.register_message_handler(
        set_month_statistic_period, Text(contains='–º–µ—Å—è—Ü', ignore_case=True), state=FSMStatistic.start
    )
    dispatcher.register_message_handler(set_week_statistic_period, commands=['–ó–∞_–Ω–µ–¥–µ–ª—é'], state=FSMStatistic.start)
    dispatcher.register_message_handler(
        set_week_statistic_period, Text(contains='–Ω–µ–¥–µ–ª', ignore_case=True), state=FSMStatistic.start
    )
    dispatcher.register_message_handler(set_today_statistic_period, commands=['–ó–∞_—Å–µ–≥–æ–¥–Ω—è'], state=FSMStatistic.start)
    dispatcher.register_message_handler(
        set_today_statistic_period, Text(contains='—Å–µ–≥–æ–¥–Ω—è', ignore_case=True), state=FSMStatistic.start
    )
    dispatcher.register_message_handler(
        set_yesterday_statistic_period, Text(contains='–≤—á–µ—Ä–∞', ignore_case=True), state=FSMStatistic.start
    )
